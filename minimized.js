 ( function( textAnimation ){ textAnimation.mainModule = function( ) { var a = this; a.c = 'main'; a.d = {}; a.e = function() { a.f(); a.g(); a.h(); }; a.f = function() { let debugOptions = textAnimation.options && textAnimation.options.debug ? textAnimation.options.debug : {}; a.d.debugger = new textAnimation.service.debuggerModule( debugOptions ); a.d.extend = new textAnimation.service.extendModule( ); a.d.getUiId = new textAnimation.service.getUiIdModule( ); a.d.setStyle = new textAnimation.service.setStyleModule( ); a.d.htmlGenerator = new textAnimation.service.htmlGeneratorModule( ); a.d.getElement = new textAnimation.service.getElementModule( ); a.d.eventManager = new textAnimation.service.eventManagerModule( ); }; a.g = function() { a.d.animations = {}; a.d.animations.player = new textAnimation.service.animations.playerModule( ); }; a.h = function() { let contentModule = textAnimation.content.contentModule; a.d.content = new contentModule(); }; return { start : function( ){ a.e( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.debuggerModule = function( options ) { var a = this; a.c = 'debuggerModule'; a.d = options; a.e = true; a.f = { 'container' : a.c + '_Container', 'dragHandle' : a.c + '_DragHandle', 'content' : a.c + '_Content', }; a.g = { 'zIndex' : 8000, 'top' : 120, 'left' : 600, 'width' : 900, 'height' : 200 }; a.h = { 'background' : 'black', 'border' : 'lightBlue', 'dragHandle' : { 'background' : 'green', 'highlight' : 'lightgreen', }, 'content' : { 'background' : 'black', 'color' : 'lightgrey', } }; a.i = null; a.j = 0; a.k = function() { a.l(); a.m(); a.n(); a.o(); }; a.o = function() { textAnimation.debug = a.p; }; a.p = function( message ) { if( !a.e ){ return; } let content = document.getElementById( a.f['content'] ); let line = document.createElement( 'div' ); line.textContent = a.j + ' ' + message ; content.prepend( line ); a.j++; a.j %= 10; }; a.l = function() { let options = a.d; a.e = options['on'] !== undefined && options['on'] === true ? true : false; for( let index of Object.keys( a.g ) ){ if( options['layoutOptions'][index] !== undefined ){ a.g[index] = options['layoutOptions'][index]; } } }; a.m = function() { if( !a.e ){ return; } a.r(); a.s(); a.t(); }; a.r = function() { let elementIds = a.f; let colors = a.h; let layoutOptions = a.g; let style = 'position:absolute; ' + 'top: ' + layoutOptions['top'] + 'px; ' + 'left: ' + layoutOptions['left'] + 'px;' + 'z-index: ' + layoutOptions['zIndex'] + ';' + 'background-color: ' + colors['background'] + ';' + 'border: ' + colors['border'] + ' 1px groove;' + 'border-radius: 5px;'; let div = document.createElement('div'); div.id = elementIds['container']; div.setAttribute ( 'style', style ); document.body.appendChild( div ); }; a.s = function() { let elementIds = a.f; let colors = a.h; let style = 'height:24px;' + 'padding-left: 4px; ' + 'padding-top: 1px;' + 'background-color:' + colors['dragHandle']['background'] + ';' + 'font-size:14px;font-family:times new roman'; let div = document.createElement('div'); div.id = elementIds['dragHandle']; div.setAttribute ( 'style', style ); div.innerHTML = 'Debugger'; let container = document.getElementById( a.f['container'] ); container.appendChild( div ); }; a.t = function() { let elementIds = a.f; let colors = a.h; let layoutOptions = a.g; let style = 'overflow: auto;' + 'width: ' + layoutOptions['width'] + 'px;' + 'height: ' + layoutOptions['height'] + 'px;' + 'background-color:' + colors['content']['background'] + ';' + 'color:' + colors['content']['color'] + ';' + 'font-size:18px;font-family:times new roman'; let div = document.createElement('div'); div.id = elementIds['content']; div.setAttribute ( 'style', style ); let container = document.getElementById( a.f['container'] ); container.appendChild( div ); }; a.n = function() { if( !a.e ){ return; } let dragHandle = document.getElementById( a.f['dragHandle'] ); dragHandle.addEventListener( 'mouseenter', a.u ); dragHandle.addEventListener( 'mouseout', a.v ); dragHandle.addEventListener( 'mousedown', a.w ); }; a.u = function( ) { let colors = a.h['dragHandle']; let dragHandle = document.getElementById( a.f['dragHandle'] ); dragHandle.style.backgroundColor = colors['highlight']; }; a.v = function( ) { let colors = a.h['dragHandle']; let dragHandle = document.getElementById( a.f['dragHandle'] ); dragHandle.style.backgroundColor = colors['background']; }; a.w = function( event ) { a.i = { 'x' : event.pageX, 'y' : event.pageY }; document.addEventListener( 'mousemove', a.x ); document.addEventListener( 'mouseup', a.y ); }; a.x = function( event ) { a.z = { 'x' : 0, 'y' : 0 }; a.z['y'] = a.i['y'] - event.pageY; a.z['x'] = a.i['x'] - event.pageX; let container = document.getElementById( a.f['container'] ); let left = parseInt( container.style.left.replace( 'px', '' ) ) - parseInt( a.z['x'] ); container.style.left = Math.max( 0, left ) + 'px'; let top = parseInt( container.style.top.replace( 'px', '' ) ) - parseInt( a.z['y'] ); top = Math.max( 0, top ); container.style.top = Math.max( 0, top ) + 'px'; a.i = { 'x' : event.pageX, 'y' : event.pageY }; }; a.y = function( event ) { document.removeEventListener( 'mousemove', a.x ); document.removeEventListener( 'mouseup', a.y ); }; a.k(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.htmlGeneratorModule = function( ) { var a = this; a.c = 'htmlGeneratorModule'; a.d = true; a.e = [ 'a', 'div', 'form', 'svg', 'iframe' ]; a.f = [ '', '', '', '', '', '', 'size', '', '', '', '', '', '', '' ]; a.g = { 'id' : 'id', 'name' : 'name', 'class' : 'class', 'type' : 'type', 'value' : 'value', 'src' : 'src', 'href' : 'href', 'target' : 'target', 'method' : 'method', 'action' : 'action', 'title' : 'title', 'size' : 'size', 'columns' : 'cols', 'rows' : 'rows', 'width' : 'width', 'height' : 'height', 'maximumLength' : 'maxlength', 'rowSpan' : 'rowspan', 'columnSpan' : 'colspan', 'checked' : 'checked', 'multiple' : 'multiple', 'readOnly' : 'readonly', 'controls' : 'controls' }; a.h = { 'zIndex' : 'z-index', 'position' : 'position', 'float' : 'float', 'clear' : 'clear', 'top' : 'top', 'left' : 'left', 'display' : 'display', 'justifyContent' : 'justify-content', 'gap' : 'gap', 'borderRadius' : 'border-radius', 'alignItems' : 'align-items', 'alignContent' : 'align-content', 'flexWrap' : 'flex-wrap', 'flexDirection' : 'flex-direction', 'opacity' : 'opacity', 'overflow' : 'overflow', 'overflowX' : 'overflow-x', 'overflowY' : 'overflow-y', 'cursor' : 'cursor', 'background' : 'background', 'backgroundColor' : 'background-color', 'backgroundRepeat' : 'background-repeat', 'backgroundPosition': 'background-position', 'backgroundSize' : 'background-size', 'color' : 'color', 'minimumWidth' : 'min-width', 'maximumWidth' : 'max-width', 'minimumHeight' : 'min-height', 'maximumHeight' : 'max-height', 'styleWidth' : 'width', 'styleHeight' : 'height', 'fontFamily' : 'font-family', 'fontSize' : 'font-size', 'lineHeight' : 'line-height', 'letterSpacing' : 'letter-spacing', 'fontWeight' : 'font-weight', 'textAlign' : 'text-align', 'textDecoration' : 'text-decoration', 'verticalAlign' : 'vertical-align', 'margin' : 'margin', 'marginTop' : 'margin-top', 'marginLeft' : 'margin-left', 'marginRight' : 'margin-right', 'marginBottom' : 'margin-bottom', 'padding' : 'padding', 'paddingTop' : 'padding-top', 'paddingLeft' : 'padding-left', 'paddingRight' : 'padding-right', 'paddingBottom' : 'padding-bottom', 'imageUrl' : 'background-image', 'transformOrigin' : 'transform-origin', 'transform' : 'transform', 'boxShadow' : 'box-shadow', 'textShadow' : 'text-shadow', 'pointerEvents' : 'pointer-events' }; a.i = { 'border' : 'border', 'borderLeft' : 'border-left', 'borderRight' : 'border-right', 'borderTop' : 'border-top', 'borderBottom' : 'border-bottom' }; a.j = function() { a.k(); }; a.k = function(){ textAnimation.prependContainer = a.l; textAnimation.appendContainer = a.m; }; a.l = function( parentId, json ){ let child = a.n( json ); a.o( child, json ); a.p( child, json ); a.q( child, json ); a.r( parentId, child ); }; a.m = function( parentId, json ){ let child = a.n( json ); a.o( child, json ); a.p( child, json ); a.q( child, json ); a.s( parentId, child ); }; a.r = function( parent, child ){ if( parent === document.body ){ document.body.insertBefore( child, document.body.firstChild ); return; } let parentElement = document.getElementById( parent ); parentElement.insertBefore( child, parentElement.firstChild ); }; a.s = function( parent, child ){ if( parent === document.body ){ document.body.appendChild( child ); return; } let parentElement = document.getElementById( parent ); parentElement.appendChild( child ); }; a.n = function( json ){ let element = document.createElement( json['element'] ); if( json['id'] !== undefined ){ element.id = json['id']; } return element; }; a.p = function( child, json ){ Object.entries( a.g ).forEach( ( [key, value] ) => { if( json[key] !== undefined ){ child.setAttribute( value, json[key] ); } }); }; a.o = function( element, json ){ let style = ''; Object.entries( a.h ).forEach( ( [key, value] ) => { if( json[key] !== undefined ){ style += value + ' : ' + json[key] + ';'; } }); style += a.t( json ); if( style !== '' ){ element.setAttribute ( 'style', style ); } }; a.t = function( json ){ let result = ''; Object.entries( a.i ).forEach( ( [key, value] ) => { if( json[key] !== undefined ){ result += value + ':'; result += a.u( json ); } }); return result; }; a.u = function( json ){ let result = ''; result += json['borderWidth']; result += ' '; result += json['borderColor']; result += ' '; result += json['borderStyle']; result += ';'; return result; }; a.q = function( element, json ){ if( json['text'] ){ element.innerHTML = json['text']; } }; a.v = function( message ) { if( a.d && htmlGenerator.debug ) { textAnimation.debug( a.c + ' ' + message ); } }; a.j(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.extendModule = function( ) { var a = this; a.c = true; a.d = 'extendModule'; a.e = null; a.f = null; a.g = null; a.h = function() { a.i(); }; a.i = function(){ textAnimation.extend = a.j; }; a.j = function( initial, overRide ) { if( !a.k( initial, overRide ) ){ return initial; } a.l( initial, overRide ); return a.g; }; a.k = function( initial, overRide ) { if( !initial || !overRide ){ a.m( 'invalid array extend.' ); return false; } if( typeof initial === 'object' && typeof overRide === 'object' ){ return true; } if( Array.isArray( initial ) && Array.isArray( overRide ) ){ return true; } a.m( 'invalid array extend.' ); return false; }; a.l = function( initial, overRide ) { if( Array.isArray( initial ) ){ a.g = [[], ...initial, ...overRide]; return; } if( typeof initial === 'object' ){ a.g = { ...initial, ...overRide }; return; } a.g = a.f; }; a.m = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.h(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.getUiIdModule = function( ) { var a = this; a.c = false; a.d = 'getUiIdModule'; a.e = null; a.f = true; a.g = function() { var array = new Uint32Array(10); window.crypto.getRandomValues( array ); var id = Math.floor( Math.random() * 10 ); a.e = array[id] % 1024; a.h(); }; a.h = function(){ textAnimation.getUiId = a.i; }; a.i = function( name ) { if( a.f ){ return 'element_' + a.e++; } else { return name + '_' + a.e++; } }; a.k = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.g(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.setStyleModule = function( ) { var a = this; a.c = false; a.d = 'setStyleModule'; a.e = function() { a.f(); }; a.f = function(){ textAnimation.setStyle = a.g; }; a.g = function( elementId, style, value ) { textAnimation.getElementById( elementId ).style[style] = value; }; a.h = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.e(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.getElementModule = function( ) { var a = this; a.c = false; a.d = 'getElementModule'; a.e = null; a.f = true; a.g = function() { a.h(); }; a.h = function(){ textAnimation.getElementById = a.i; }; a.i = function( id ) { return document.getElementById( id ); }; a.j = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.g(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.eventManagerModule = function( ) { var a = this; a.c = false; a.d = 'EventManagerModule'; a.e = {}; a.f = function() { a.g(); }; a.g = function(){ textAnimation.subscribeToEvent = a.h; textAnimation.unSubscribeFromEvent = a.i; textAnimation.callEvent = a.j; }; a.h = function( eventId, callback ) { if( !a.e[eventId] ){ a.e[eventId] = new Array(); } let subscription = { 'callback' : callback }; a.e[eventId].push( subscription ); }; a.i = function( eventId, callback ) { if( !a.e[eventId] ){ return; } for( var i = a.e[eventId].length - 1; i >= 0 ; i-- ) { if( a.e[eventId][i]['callback'] === callback ) { a.e[eventId].splice( i, 1 ); } } }; a.j = function( eventId, options ) { if( !a.e[eventId] ){ return; } let callbacks = []; for( var i = 0; i < a.e[eventId].length; i++ ) { callbacks.push( a.e[eventId][i]['callback'] ); } for( var i = 0; i < callbacks.length; i++ ) { callbacks[i]( options ); } }; a.k = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.f(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.buttonModule = function( parentId, options, callbacks ) { var a = this; a.c = false; a.d = 'buttonModule'; a.e = parentId; a.f = options; a.g = callbacks; a.h = true; a.i = false; a.j = function() { a.k(); a.l(); }; a.k = function() { a.m( 'addHtml' ); textAnimation.appendContainer( a.e, a.f ); }; a.n = function() { a.m( 'removeHtml' ); textAnimation.getElementById( a.f['id'] ).remove(); }; a.l = function() { a.m( 'addEvents: ' + a.f['id']); a.o(); a.p(); }; a.o = function() { if( a.g['mouseOver'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).addEventListener( 'mouseover' , a.q ); } if( a.g['mouseOut'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).addEventListener( 'mouseout' , a.r ); } if( a.g['click'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).addEventListener( 'click' , a.s ); } }; a.p = function() { if( a.g['keyUp'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).addEventListener( 'keyup' , a.t ); } if( a.g['keyDown'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).addEventListener( 'keydown' , a.u ); } }; a.v = function() { a.m( 'removeEvents: ' + a.f['id']); a.w(); a.x(); }; a.w = function() { if( a.g['mouseOver'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).removeEventListener( 'mouseover' , a.q ); } if( a.g['mouseOut'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).removeEventListener( 'mouseout' , a.r ); } if( a.g['click'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).removeEventListener( 'click' , a.s ); } }; a.x = function() { if( a.g['keyUp'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).removeEventListener( 'keyup' , a.t ); } if( a.g['keyDown'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).removeEventListener( 'keydown' , a.u ); } }; a.q = function( event ){ if( !a.h ){ return; } a.m( 'mouseOver' + a.f['id'] ); a.i = true; a.y(); a.g['mouseOver']( event, a.f ); }; a.r = function( ){ if( !a.h ){ return; } a.m( 'mouseOut' ); a.i = false; a.z(); a.g['mouseOut']( event, a.f ); }; a.y = function( ){ if( a.f['images'] !== undefined && a.f['images']['highlight'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).style.backgroundImage = a.f['images']['highlight']; } if( a.f['colors'] !== undefined ){ let colors = a.f['colors']; if( colors['highlight'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).style.color = colors['highlight']; } if( colors['background'] !== undefined && colors['background']['highlight'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).style.backgroundColor = colors['background']['highlight']; } if( colors['border'] !== undefined && colors['border']['highlight'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).style.borderColor = colors['border']['highlight']; } } }; a.aa = function( ){ if( a.f['images'] !== undefined && a.f['images']['disabled'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).style.backgroundImage = a.f['images']['disabled']; } if( a.f['colors'] !== undefined ){ let colors = a.f['colors']; if( colors['disabled'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).style.color = colors['disabled']; } if( colors['background'] !== undefined && colors['background']['disabled'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).style.backgroundColor = colors['background']['disabled']; } if( colors['border'] !== undefined && colors['border']['disabled'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).style.borderColor = colors['border']['disabled']; } } }; a.z = function( ){ if( a.f['images'] !== undefined && a.f['images']['image'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).style.backgroundImage = a.f['images']['image']; } if( a.f['colors'] !== undefined ){ let colors = a.f['colors']; if( colors['color'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).style.color = colors['color']; } if( colors['background'] !== undefined && colors['background']['color'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).style.backgroundColor = colors['background']['color']; } if( colors['border'] !== undefined && colors['border']['color'] !== undefined ){ textAnimation.getElementById( a.f['id'] ).style.borderColor = colors['border']['color']; } } }; a.s = function( event ){ if( !a.h ){ return; } a.m( 'Click' + a.f['id'] ); if( a.g['click'] !== undefined ){ a.g['click']( event, a.f ); } }; a.t = function( event ){ if( !a.h ){ return; } a.g['keyUp']( event, a.f ); }; a.u = function( event ){ if( !a.h ){ return; } a.g['keyDown']( event, a.f ); }; a.ab = function( ){ a.m( 'refresh' ); if( a.i ){ a.y(); } else { a.z(); } }; a.abEvents = function( ){ a.v(); a.l(); }; a.ad = function() { a.m( 'disable' ); a.h = false; a.aa(); }; a.ae = function() { a.m( 'enable' ); a.h = true; a.z(); }; a.af = function( colors ){ a.m( 'setColors' ); a.f['colors'] = colors; a.ab(); }; a.ag = function() { a.v(); a.n(); a.f = null; a.g = null; }; a.m = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.j(); return { getContainerId : function( ){ return a.f['id']; }, getOptions : function( ){ return a.f; }, setColors : function( colors ){ a.af( colors ); }, refresh : function( ){ a.ab( ); }, refreshEvents : function( ){ a.abEvents( ); }, disable : function( ){ a.ad( ); }, enable : function( ){ a.ae( ); }, destruct : function( ){ a.ag( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service.animations = textAnimation.service.animations ? textAnimation.service.animations : {}; textAnimation.service.animations.playerModule = function( ) { var a = this; a.c = false; a.d = 'AnimationsPlayerModule'; a.e = 40; a.f = 1000 / a.e; a.g = null; a.h = null; a.i = 0; a.j = false; a.k = false; a.l = null; a.m = {}; a.n = function() { a.o(); }; a.o = function(){ textAnimation.animations.addFrame = a.p; textAnimation.animations.removeFrame = a.q; textAnimation.animations.pause = a.r; textAnimation.animations.resume = a.s; textAnimation.animations.arePaused = a.t; }; a.u = function(){ delete textAnimation.animations.addFrame; delete textAnimation.animations.removeFrame; delete textAnimation.animations.pause; delete textAnimation.animations.resume; delete textAnimation.animations.arePaused; }; a.p = function( options ) { let frameId = a.i; a.i++; let frameOptions = a.w( options ); frameOptions['id'] = frameId; a.m['frame' + frameId] = frameOptions; if( !a.j && !a.x ){ a.j = true; a.y(); } return frameId; }; a.q = function( frameId ) { if( a.m['frame' + frameId] !== undefined ){ delete a.m['frame' + frameId]; } }; a.w = function( options ) { let frameOptions = { 'callback' : options['callback'] }; if( options['frameDelay'] ){ frameOptions['frameDelay'] = options['frameDelay']; } if( options['timeDelay'] ){ frameOptions['timeDelay'] = options['timeDelay']; frameOptions['startedAt'] = new Date(); } return frameOptions; }; a.qs = function() { Object.entries( a.m ).forEach( ( [key, frame] ) => { delete a.m[key]; }); }; a.y = function() { if( Object.keys( a.m ).length <= 0 ){ a.j = false; a.l = null; return; } if( a.l === null ){ a.l = new Date(); } a.g = window.requestAnimationFrame( a.aa ); }; a.aa = function() { if( a.g !== null ){ a.g = null; } let date = new Date(); let expired = 0; expired = Math.abs( date.getTime() - a.l.getTime() ); let delay = Math.max( a.f - expired, 0 ); a.h = setTimeout( function () { a.ab(); }, delay ); }; a.ab = function() { a.ac(); a.ad(); let animationsToPlay = a.ae(); for( let i = 0; i < animationsToPlay.length; i++ ) { let frame = a.m[animationsToPlay[i]]; delete a.m[animationsToPlay[i]]; frame['callback']( ); } a.y(); }; a.ad = function( ) { Object.entries( a.m ).forEach( ( [key, frame] ) => { if( frame['frameDelay'] ){ frame['frameDelay']--; } }); }; a.ae = function( ) { let framesToPlay = []; Object.entries( a.m ).forEach( ( [key, frame] ) => { if( a.af( frame ) ){ framesToPlay.push( key ); } }); return framesToPlay; }; a.af = function( options ) { if( options['timeDelay'] === undefined && options['frameDelay'] === undefined ){ return true; } if( options['timeDelay'] !== undefined ){ let date = new Date(); let expired = Math.abs( date.getTime() - options['startedAt'].getTime() ); if( expired >= options['timeDelay'] ){ return true; } } if( options['frameDelay'] !== undefined ){ if( options['frameDelay'] <= 0 ){ return true; } } return false; }; a.r = function(){ a.ag( ); a.ac( ); a.k = true; }; a.t = function(){ return a.k; }; a.s = function(){ a.y(); a.k = false; }; a.ah = function() { a.ag( ); a.ac( ); a.j = false; a.l = null; }; a.ag = function( ) { if( a.g !== null ){ window.cancelAnimationFrame( a.g ); a.g = null; } }; a.ac = function( ) { if( a.h ){ clearTimeout( a.h ); a.h = null; } }; a.ai = function() { a.aj( 'destruct' ); a.u(); a.ah(); a.qs(); }; a.aj = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.n(); return { destruct : function( ){ a.ai( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.animations = textAnimation.animations ? textAnimation.animations : {}; textAnimation.animations.text = textAnimation.animations.text ? textAnimation.animations.text : {}; textAnimation.animations.text.textModule = function( callerId, options, callbacks) { var a = this; a.c = true; a.d = 'AnimationsTextModule'; a.e = callerId; a.f = options; a.g = callbacks; a.h = {}; a.i = { 'frameId' : null, 'ready' : false }; a.j = {}; a.k = function() { a.l(); a.m(); }; a.l = function() { let valuesModule = textAnimation.animations.text.valuesModule; a.j['values'] = new valuesModule( a.f ); }; a.m = function() { let animateModule = textAnimation.animations.text.animateModule; a.j['animate'] = new animateModule( a.e, a.f ); }; a.n = function() { let animationOptions = a.h; animationOptions['ready'] = false; let options = { 'frameDelay' : a.j['values'].getStartDelay( ), 'callback' : a.o }; animationOptions['frameId'] = textAnimation.animations.addFrame( options ); }; a.o = function() { let animationOptions = a.h; a.h['frameId'] = null; a.p(); if( !animationOptions['ready'] ){ let direction = animationOptions['direction']; let options = { 'frameDelay' : a.j['values'].getDelay( direction ), 'callback' : a.o }; animationOptions['frameId'] = textAnimation.animations.addFrame( options ); } }; a.p = function() { let animationOptions = a.h; a.j['values'].updateValues( ); a.oCaller(); a.r( ); if( !a.j['values'].isReady( ) ){ return; } animationOptions['ready'] = true; a.s(); }; a.oCaller = function() { let values = a.j['values'].getValues( ); a.j.animate.animate( values ); }; a.r = function() { if( a.j['values'].triggerReached( ) ){ a.g['trigger']( a.f ); } }; a.s = function( ) { a.g['ready']( a.f ); }; a.t = function() { Object.entries( a.j ).forEach( ( [key, module] ) => { module.destruct( ); }); a.j = {}; }; a.u = function( ) { a.v(); a.n(); }; a.v = function() { let animationOptions = a.h; if( animationOptions['frameId'] !== null ){ textAnimation.animations.removeFrame( animationOptions['frameId'] ); animationOptions['frameId'] = null; } }; a.w = function( ) { let values = a.j['values'].getValues( ); a.j.animate.animate( values ); }; a.x = function() { a.v(); a.t(); a.f = null; a.g = null; }; a.y = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.k(); return { start : function( direction ){ a.u( direction ); }, stop : function( ){ a.v( ); }, getValues : function( ){ return a.j.values.getValues( ); }, setValues : function( values ){ a.j.values.setValues( values ); }, layoutChange : function( ){ a.w( ); }, destruct : function( ){ a.x( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.animations.text.animateModule = function( callerId, options ) { var a = this; a.c = true; a.d = 'AnimationsTextAnimateModule'; a.e = callerId; a.f = options; a.g = function() { }; a.h = function( values ) { a.hFontSize( values ); a.hOpacity( values ); a.hRgb( values ); a.hTransform( values ); }; a.hFontSize = function( values ) { if( !values['fontSize'] ){ return; } let units = values['fontSize']['units'] ? values['fontSize']['units'] : 'px'; textAnimation.setStyle( a.e , 'font-size', parseInt( values['fontSize']['value'] ) + units ); }; a.hOpacity = function( values ) { if( !values['opacity'] ){ return; } textAnimation.setStyle( a.e , 'opacity', values['opacity']['value'] ); }; a.hRgb = function( values ) { if( !values['colorR'] || !values['colorG'] || !values['colorB'] ){ return; } let color = 'rgb(' + values['colorR']['value'] + ',' + values['colorG']['value'] + ',' + values['colorB']['value'] + ')'; textAnimation.setStyle( a.e , 'color', color ); }; a.hTransform = function( values ) { let transform = ''; if( values['left'] ){ transform += 'translateX( ' + parseInt( values['left']['value'] ) + 'px' + ') '; } if( values['top'] ){ transform += 'translateY( ' + parseInt( values['top']['value'] ) + 'px' + ') '; } transform += a.hParentBasedTransform( values ); if( values['scale'] ){ transform += 'scale( ' + values['scale']['value'] + ') '; } if( values['scaleX'] ){ transform += 'scaleX( ' + values['scaleX']['value'] + ') '; } if( values['scaleY'] ){ transform += 'scaleY( ' + values['scaleY']['value'] + ') '; } if( values['rotate'] ){ transform += 'rotate( ' + parseInt( values['rotate']['value'] ) + 'deg ) '; } if( transform !== '' ){ textAnimation.setStyle( a.e , 'transform', transform ); } }; a.hParentBasedTransform = function( values ) { let transform = ''; if( !values['parentLeft'] && !values['parentTop'] ){ return; } let parentLayout = textAnimation.getElementById( a.f['parentId'] ).getBoundingClientRect(); if( values['parentLeft'] ){ let left = ( parentLayout['width'] / 100 ) * values['parentLeft']['value']; let leftPosition = values['parentLeft']['position'] ? values['parentLeft']['position'] : 'left'; if( leftPosition === 'middle' ){ left -= textAnimation.getElementById( a.e ).offsetWidth / 2; } if( leftPosition === 'right' ){ left -= textAnimation.getElementById( a.e ).offsetWidth; } transform += 'translateX( ' + parseInt( left ) + 'px' + ') '; } if( values['parentTop'] ){ let top = ( parentLayout['height'] / 100 ) * values['parentTop']['value']; let topPosition = values['parentTop']['position'] ? values['parentTop']['position'] : 'top'; if( topPosition === 'middle' ){ top -= textAnimation.getElementById( a.e ).offsetHeight / 2; } if( topPosition === 'bottom' ){ top -= textAnimation.getElementById( a.e ).offsetHeight; } transform += 'translateY( ' + parseInt( top ) + 'px' + ') '; } return transform; }; a.n = function( values ) { a.h( values ); }; a.o = function() { a.f = null; }; a.p = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.g(); return { animate : function( values ){ a.h( values ); }, layoutChange : function( values ){ a.n( values ); }, destruct : function( ){ a.o( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.animations.text.valuesModule = function( options ) { var a = this; a.c = false; a.d = 'AnimationsTextValuesModule'; a.e = options; a.f = { 'startDelay' : 0, 'delay' : 0, 'duration' : 40, 'items' : {}, }; a.g = { 'step' : 0 }; a.h = function() { a.i(); a.j( ); a.k( ); }; a.i = function() { a.f = textAnimation.extend( a.f, a.e ); if( a.f['trigger'] ){ a.f['trigger']['triggered'] = false; } a.f = textAnimation.extend( a.f, a.g ); }; a.j = function( direction ) { let animationOptions = a.f; animationOptions['startDelay'] = parseInt( animationOptions['startDelay'] ); animationOptions['delay'] = parseInt( animationOptions['delay'] ); animationOptions['duration'] = parseInt( animationOptions['duration'] ); Object.entries( animationOptions['items'] ).forEach( ( [key, item] ) => { a.l( key, item ); }); if( animationOptions['trigger'] ){ animationOptions['trigger']['at'] = parseInt( options['trigger']['at'] ); } }; a.l = function( itemIndex, item ) { let animationOptions = a.f; if( item['path'] ){ let pathArray = item['path'].split( ',' ); Object.entries( pathArray ).forEach( ( [key, value] ) => { pathArray[key] = parseFloat( value ); }); animationOptions['items'][itemIndex]['path'] = pathArray; } }; a.k = function( ) { let animationOptions = a.f; animationOptions['steps'] = animationOptions['delay'] !== 0 ? animationOptions['duration'] / animationOptions['delay'] : animationOptions['duration']; }; a.m = function( ) { let animationOptions = a.f; Object.entries( animationOptions['items'] ).forEach( ( [key, item] ) => { a.n( item ); }); animationOptions['step']++; }; a.n = function( item ) { if( !item['path'] ){ return; } let path = item['path']; if( path.length === 1 ){ item['value'] = path[0]; return; } a.o( item ); }; a.o = function( item ) { let path = item['path']; let animationOptions = a.f; let steps = animationOptions['steps']; let step = animationOptions['step']; let pathSteps = path.length - 1; let stepsPerPathStep = steps / pathSteps; let stepDistance = step % stepsPerPathStep; let pathPosition = parseInt( step / stepsPerPathStep ); let from = path[pathPosition]; let to = path[pathPosition + 1]; let distance = ( ( to - from ) / stepsPerPathStep ) * ( stepDistance + 1 ); item['value'] = from + distance; }; a.p = function( ) { let animationOptions = a.f; let values = {}; Object.entries( animationOptions['items'] ).forEach( ( [key, item] ) => { values[key] = { 'value' : item['value'] }; if( item['units'] ){ values[key]['units'] = item['units']; } if( item['position'] ){ values[key]['position'] = item['position']; } }); return values; }; a.q = function( values ) { let animationOptions = a.f; Object.entries( values ).forEach( ( [key, item] ) => { animationOptions['items'][key] = animationOptions['items'][key] ? animationOptions['items'][key] : {}; animationOptions['items'][key]['value'] = item['value']; if( item['units'] ){ animationOptions['items'][key]['units'] = item['units']; } if( item['position'] ){ animationOptions['items'][key]['position'] = item['position']; } }); }; a.r = function( ) { let animationOptions = a.f; return animationOptions['startDelay']; }; a.s = function( ) { let animationOptions = a.f; return animationOptions['delay']; }; a.t = function( ) { let animationOptions = a.f; if( !animationOptions['trigger'] || animationOptions['trigger']['triggered'] ){ return false; } let itemId = animationOptions['trigger']['itemId']; let item = animationOptions['items'][itemId]; let at = animationOptions['trigger']['at']; let path = item['path']; let steps = animationOptions['steps']; let stepsPerPath = steps / path.length; let step = animationOptions['step']; if( step / stepsPerPath >= at ){ a.f['trigger']['triggered'] = true; return true; } return false; }; a.u = function( ) { let ready = true; let animationOptions = a.f; if( animationOptions['step'] < animationOptions['steps'] ){ ready = false; } return ready; }; a.v = function() { a.e = null; }; a.w = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.h(); return { getValues : function( ){ return a.p( ); }, setValues : function( values ){ a.q( values ); }, getStartDelay : function( ){ return a.r( ); }, getDelay : function( ){ return a.s( ); }, updateValues : function( ){ a.m( ); }, triggerReached : function( ){ return a.t( ); }, isReady : function( direction ){ return a.u( direction ); }, destruct : function( ){ a.v( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.content = textAnimation.content ? textAnimation.content : {}; textAnimation.content.contentModule = function( ) { var a = this; a.c = 'contentModule'; a.d = true; a.e = { 'id' : textAnimation.getUiId( a.c + 'Container' ), 'element' : 'div', 'backgroundColor' : 'red', 'overflow' : 'hidden', }; a.f = { 'maximumWidth' : 1200, 'height' : 70, 'width' : 70, }; a.g = {}; a.h = function() { a.i( 'content module construct' ); a.j(); a.k(); a.l(); a.m(); }; a.j = function() { let containerId = textAnimation.options && textAnimation.options.containerId ? textAnimation.options.containerId : null; if( containerId ){ textAnimation.appendContainer( containerId, a.e ); return; } textAnimation.appendContainer( document.body, a.e ); }; a.k = function() { addEventListener( 'orientationchange', a.l ); addEventListener( 'resize', a.l ); }; a.n = function() { removeEventListener( 'orientationchange', a.l ); removeEventListener( 'resize', a.l ); }; a.m = function() { let animationModule = textAnimation.content.animation.animationModule; a.g.animation = new animationModule( a.e['id'] ); }; a.l = function() { let layout = { 'window' : {}, 'container' : {} }; a.o( layout ); a.p( layout ); a.q( layout ); a.r( layout ); a.s( layout ); if( a.g.animation ){ a.g.animation.layoutChange( ); } }; a.o = function( layout ) { let containerLayout = textAnimation.getElementById( textAnimation.options.containerId ).getBoundingClientRect(); layout['window']['dimensions'] = { 'width' : containerLayout.width, 'height' : containerLayout.height }; a.i( 'window width: ' + layout['window']['dimensions']['width'] ); }; a.p = function( layout ) { let windowDimensions = layout['window']['dimensions']; let height = ( windowDimensions['height'] / 100 ) * a.f['height']; let width = ( windowDimensions['width'] / 100 ) * a.f['width']; width = Math.min( width, a.f['maximumWidth'] ); a.i( 'width: ' + width ); layout['container']['dimensions'] = { 'width' : width, 'height' : height }; }; a.s = function( layout ) { let dimensions = layout['container']['dimensions']; textAnimation.setStyle( a.e['id'], 'width', dimensions['width'] + 'px' ); textAnimation.setStyle( a.e['id'], 'height', dimensions['height'] + 'px' ); }; a.q = function( layout ) { let windowDimensions = layout['window']['dimensions']; let containerDimensions = layout['container']['dimensions']; let top = ( windowDimensions['height'] - containerDimensions['height'] ) / 2; let left = ( windowDimensions['width'] - containerDimensions['width'] ) / 2; let containerPositions = { 'top' : top, 'left' : left }; layout['container']['positions'] = containerPositions; }; a.r = function( layout ) { let positions = layout['container']['positions']; textAnimation.setStyle( a.e['id'], 'margin-left', positions['left'] + 'px' ); textAnimation.setStyle( a.e['id'], 'margin-top', positions['top'] + 'px' ); }; a.i = function( message ) { if( a.d ) { textAnimation.debug( a.c + ' ' + message ); } }; a.h(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.content.animation = textAnimation.content.animation ? textAnimation.content.animation : {}; textAnimation.content.animation.animationModule = function( parentId ) { var a = this; a.c = 'ContentAnimationModule'; a.d = true; a.e = parentId; a.f = textAnimation.animations; a.g = { 'element' : 'div', 'display' : 'none', 'text' : 'Text', 'backgroundColor' : 'transparent', }; a.h = 0; a.i = {}; a.j = function() { a.k( 'content module construct' ); a.l(); }; a.m = function() { let animationOptions = a.f[a.h]; let target = animationOptions['target']; a.i[target] = a.i[target] ? a.i[target] : {}; if( !animationOptions['createElement'] ){ return; } let element = textAnimation.extend( {}, a.g ); element['id'] = textAnimation.getUiId( a.c + target ); element['text'] = animationOptions['text']; textAnimation.appendContainer( a.e, element ); a.i[target]['elementId'] = element['id']; }; a.o = function() { let animationOptions = a.f[a.h]; let target = animationOptions['target']; let element = a.i[target]; if( element['animation'] ){ element['animation'].destruct(); } textAnimation.getElementById( element['elementId'] ).remove(); delete a.i[target]; }; a.l = function() { if( a.p() ){ return; } a.m(); let animation = a.q(); animation.start( ); }; a.q = function() { let animationOptions = textAnimation.extend( {}, a.f[a.h] ); animationOptions['index'] = a.h; animationOptions['parentId'] = a.e; let target = animationOptions['target']; let elementId = a.i[target]['elementId']; a.r( a.i[target]['animation'] ); let animationModule = textAnimation.animations.text.textModule; var callbacks = { 'trigger' : a.s, 'ready' : a.t }; let animation = new animationModule( elementId, animationOptions, callbacks ); a.i[target]['animation'] = animation; return animation; }; a.r = function( animation ) { if( !animation ){ return; } animation.destruct(); }; a.s = function( options ) { a.k( 'trigger' ); a.u( options ); if( options['trigger']['playNext'] && a.sCanPlayNext( options ) ){ a.w(); } }; a.t = function( options ) { a.k( 'ready' ); a.u( options ); a.x( options ); if( options['trigger'] && options['trigger']['playNext'] && a.sCanPlayNext( options ) ){ return; } a.w(); }; a.sCanPlayNext = function( options ) { let nextAnimation = options['index'] + 1 < a.f.length ? a.f[options['index'] + 1] : null; if( !nextAnimation || nextAnimation['target'] !== options['target'] ){ return true; } return false; }; a.w = function() { a.h++; if( a.p() ){ return; } a.m(); let animation = a.q(); a.z( animation ); animation.start( ); }; a.u = function( options ) { if( !options['target'] ){ return; } let target = options['target']; let elementId = a.i[target]['elementId']; textAnimation.setStyle( elementId , 'display', 'table' ); }; a.x = function( options ) { let animationOptions = a.f[options['index']]; let target = animationOptions['target']; let element = a.i[target]; let values = element['values'] ? element['values'] : {}; element['values'] = textAnimation.extend( values, element['animation'].getValues() ); }; a.z = function() { let animationOptions = a.f[a.h]; let target = animationOptions['target']; let element = a.i[target]; if( !element['values'] ){ return; } element['animation'].setValues( element['values'] ); }; a.p = function() { if( a.h < a.f.length ){ return false; } a.k( 'All animations played' ); return true; }; a.aa = function() { Object.entries( a.i ).forEach( ( [key, element] ) => { a.ab( key, element ); }); }; a.ab = function( key, element ) { if( !element['animation'] ){ return; } element['animation'].layoutChange(); }; a.rs = function() { Object.entries( a.ad ).forEach( ( [key, module] ) => { if( module ){ module.destruct(); } }); a.ad = null; }; a.ae = function() { a.k( 'destruct' ); a.rs(); a.af(); a.ag = null; }; a.k = function( message ) { if( a.d ) { textAnimation.debug( a.c + ' ' + message ); } }; a.j(); return { layoutChange : function( ){ a.aa( ); }, destruct : function( ){ a.ae( ); } }; }; })( textAnimation ); 