 ( function( textAnimation ){ textAnimation.mainModule = function( ) { let a = this; a.c = 'mainModule'; a.d = {}; a.e = function() { a.f(); a.g(); }; a.f = function() { let debugOptions = textAnimation.options && textAnimation.options.debug ? textAnimation.options.debug : {}; a.d.debug = new textAnimation.service.debugModule( debugOptions ); a.d.extend = new textAnimation.service.extendModule( ); a.d.getUiId = new textAnimation.service.getUiIdModule( ); a.d.setStyle = new textAnimation.service.setStyleModule( ); a.d.htmlGenerator = new textAnimation.service.htmlGeneratorModule( ); a.d.getElement = new textAnimation.service.getElementModule( ); a.d.eventManager = new textAnimation.service.eventManagerModule( ); a.d.jsonLoaderManager = new textAnimation.service.jsonLoaderModule( ); a.h(); }; a.h = function() { a.d.animations = {}; let playerModule = textAnimation.animations.service.playerModule; a.d.animations.player = new playerModule( ); let effectsModule = textAnimation.animations.service.effectsModule; a.d.animations.effects = new effectsModule( ); }; a.g = function() { let contentModule = textAnimation.content.contentModule; a.d.content = new contentModule(); a.d.content.startAnimation(); }; return { start : function( ){ a.e( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.debugModule = function( options ) { let a = this; a.c = 'DebugModule'; a.d = options; a.e = true; a.f = { 'container' : a.c + '_Container', 'dragHandle' : a.c + '_DragHandle', 'content' : a.c + '_Content', }; a.g = { 'zIndex' : 8000, 'top' : 120, 'left' : 600, 'width' : 900, 'height' : 200 }; a.h = { 'background' : 'black', 'border' : 'lightBlue', 'dragHandle' : { 'background' : 'green', 'highlight' : 'lightgreen', }, 'content' : { 'background' : 'black', 'color' : 'lightgrey', } }; a.i = null; a.j = 0; a.k = function() { a.l(); a.m(); a.n(); a.o(); }; a.o = function() { textAnimation.debug = a.p; }; a.p = function( message ) { if( !a.e ){ return; } let content = document.getElementById( a.f['content'] ); let line = document.createElement( 'div' ); line.textContent = a.j + ' ' + message ; content.prepend( line ); a.j++; a.j %= 10; }; a.l = function() { let options = a.d; a.e = options['on'] !== undefined && options['on'] === true ? true : false; for( let index of Object.keys( a.g ) ){ if( options['layoutOptions'][index] !== undefined ){ a.g[index] = options['layoutOptions'][index]; } } }; a.m = function() { if( !a.e ){ return; } a.r(); a.s(); a.t(); }; a.r = function() { let elementIds = a.f; let colors = a.h; let layoutOptions = a.g; let style = 'position:absolute; ' + 'top: ' + layoutOptions['top'] + 'px; ' + 'left: ' + layoutOptions['left'] + 'px;' + 'z-index: ' + layoutOptions['zIndex'] + ';' + 'background-color: ' + colors['background'] + ';' + 'border: ' + colors['border'] + ' 1px groove;' + 'border-radius: 5px;'; let div = document.createElement('div'); div.id = elementIds['container']; div.setAttribute ( 'style', style ); document.body.appendChild( div ); }; a.s = function() { let elementIds = a.f; let colors = a.h; let style = 'height:24px;' + 'padding-left: 4px; ' + 'padding-top: 1px;' + 'background-color:' + colors['dragHandle']['background'] + ';' + 'font-size:14px;font-family:times new roman'; let div = document.createElement('div'); div.id = elementIds['dragHandle']; div.setAttribute ( 'style', style ); div.innerHTML = 'Debugger'; let container = document.getElementById( a.f['container'] ); container.appendChild( div ); }; a.t = function() { let elementIds = a.f; let colors = a.h; let layoutOptions = a.g; let style = 'overflow: auto;' + 'width: ' + layoutOptions['width'] + 'px;' + 'height: ' + layoutOptions['height'] + 'px;' + 'background-color:' + colors['content']['background'] + ';' + 'color:' + colors['content']['color'] + ';' + 'font-size:18px;font-family:times new roman'; let div = document.createElement('div'); div.id = elementIds['content']; div.setAttribute ( 'style', style ); let container = document.getElementById( a.f['container'] ); container.appendChild( div ); }; a.n = function() { if( !a.e ){ return; } let dragHandle = document.getElementById( a.f['dragHandle'] ); dragHandle.addEventListener( 'mouseenter', a.u ); dragHandle.addEventListener( 'mouseout', a.v ); dragHandle.addEventListener( 'mousedown', a.w ); }; a.u = function( ) { let colors = a.h['dragHandle']; let dragHandle = document.getElementById( a.f['dragHandle'] ); dragHandle.style.backgroundColor = colors['highlight']; }; a.v = function( ) { let colors = a.h['dragHandle']; let dragHandle = document.getElementById( a.f['dragHandle'] ); dragHandle.style.backgroundColor = colors['background']; }; a.w = function( event ) { a.i = { 'x' : event.pageX, 'y' : event.pageY }; document.addEventListener( 'mousemove', a.x ); document.addEventListener( 'mouseup', a.y ); }; a.x = function( event ) { a.z = { 'x' : 0, 'y' : 0 }; a.z['y'] = a.i['y'] - event.pageY; a.z['x'] = a.i['x'] - event.pageX; let container = document.getElementById( a.f['container'] ); let left = parseInt( container.style.left.replace( 'px', '' ) ) - parseInt( a.z['x'] ); container.style.left = Math.max( 0, left ) + 'px'; let top = parseInt( container.style.top.replace( 'px', '' ) ) - parseInt( a.z['y'] ); top = Math.max( 0, top ); container.style.top = Math.max( 0, top ) + 'px'; a.i = { 'x' : event.pageX, 'y' : event.pageY }; }; a.y = function( event ) { document.removeEventListener( 'mousemove', a.x ); document.removeEventListener( 'mouseup', a.y ); }; a.k(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.htmlGeneratorModule = function( ) { let a = this; a.c = 'HtmlGeneratorModule'; a.d = false; a.e = [ 'a', 'div', 'form', 'svg', 'iframe' ]; a.f = [ '', '', '', '', '', '', 'size', '', '', '', '', '', '', '' ]; a.g = { 'id' : 'id', 'name' : 'name', 'class' : 'class', 'type' : 'type', 'value' : 'value', 'src' : 'src', 'href' : 'href', 'target' : 'target', 'method' : 'method', 'action' : 'action', 'title' : 'title', 'size' : 'size', 'columns' : 'cols', 'rows' : 'rows', 'maximumLength' : 'maxlength', 'rowSpan' : 'rowspan', 'columnSpan' : 'colspan', 'checked' : 'checked', 'multiple' : 'multiple', 'readOnly' : 'readonly', 'controls' : 'controls' }; a.h = { 'zIndex' : 'z-index', 'position' : 'position', 'float' : 'float', 'clear' : 'clear', 'top' : 'top', 'left' : 'left', 'display' : 'display', 'justifyContent' : 'justify-content', 'gap' : 'gap', 'borderRadius' : 'border-radius', 'alignItems' : 'align-items', 'alignContent' : 'align-content', 'flexWrap' : 'flex-wrap', 'flexDirection' : 'flex-direction', 'opacity' : 'opacity', 'overflow' : 'overflow', 'overflowX' : 'overflow-x', 'overflowY' : 'overflow-y', 'cursor' : 'cursor', 'background' : 'background', 'backgroundColor' : 'background-color', 'backgroundRepeat' : 'background-repeat', 'backgroundPosition': 'background-position', 'backgroundSize' : 'background-size', 'color' : 'color', 'minimumWidth' : 'min-width', 'maximumWidth' : 'max-width', 'minimumHeight' : 'min-height', 'maximumHeight' : 'max-height', 'width' : 'width', 'height' : 'height', 'fontFamily' : 'font-family', 'fontSize' : 'font-size', 'lineHeight' : 'line-height', 'letterSpacing' : 'letter-spacing', 'fontWeight' : 'font-weight', 'textAlign' : 'text-align', 'textDecoration' : 'text-decoration', 'verticalAlign' : 'vertical-align', 'margin' : 'margin', 'marginTop' : 'margin-top', 'marginLeft' : 'margin-left', 'marginRight' : 'margin-right', 'marginBottom' : 'margin-bottom', 'padding' : 'padding', 'paddingTop' : 'padding-top', 'paddingLeft' : 'padding-left', 'paddingRight' : 'padding-right', 'paddingBottom' : 'padding-bottom', 'imageUrl' : 'background-image', 'transformOrigin' : 'transform-origin', 'transform' : 'transform', 'boxShadow' : 'box-shadow', 'textShadow' : 'text-shadow', 'pointerEvents' : 'pointer-events' }; a.i = { 'border' : 'border', 'borderLeft' : 'border-left', 'borderRight' : 'border-right', 'borderTop' : 'border-top', 'borderBottom' : 'border-bottom' }; a.j = function() { a.k(); }; a.k = function(){ textAnimation.prependContainer = a.l; textAnimation.appendContainer = a.m; }; a.l = function( parentId, json ){ let child = a.n( json ); a.o( child, json ); a.p( child, json ); a.q( child, json ); a.r( parentId, child ); }; a.m = function( parentId, json ){ let child = a.n( json ); a.o( child, json ); a.p( child, json ); a.q( child, json ); a.s( parentId, child ); }; a.r = function( parent, child ){ if( parent === document.body ){ document.body.insertBefore( child, document.body.firstChild ); return; } let parentElement = document.getElementById( parent ); parentElement.insertBefore( child, parentElement.firstChild ); }; a.s = function( parent, child ){ if( parent === document.body ){ document.body.appendChild( child ); return; } let parentElement = document.getElementById( parent ); parentElement.appendChild( child ); }; a.n = function( json ){ let element = document.createElement( json['element'] ); if( json['id'] !== undefined ){ element.id = json['id']; } return element; }; a.p = function( child, json ){ Object.entries( a.g ).forEach( ( [key, value] ) => { if( json[key] !== undefined ){ child.setAttribute( value, json[key] ); } }); }; a.o = function( element, json ){ let style = ''; Object.entries( a.h ).forEach( ( [key, value] ) => { if( json[key] !== undefined ){ style += value + ' : ' + json[key] + ';'; } }); style += a.t( json ); if( style !== '' ){ element.setAttribute ( 'style', style ); } }; a.t = function( json ){ let result = ''; Object.entries( a.i ).forEach( ( [key, value] ) => { if( json[key] !== undefined ){ result += value + ':'; result += a.u( json ); } }); return result; }; a.u = function( json ){ let result = ''; result += json['borderWidth']; result += ' '; result += json['borderColor']; result += ' '; result += json['borderStyle']; result += ';'; return result; }; a.q = function( element, json ){ if( json['text'] ){ element.innerHTML = json['text']; } }; a.v = function( message ) { if( a.d && htmlGenerator.debug ) { textAnimation.debug( a.c + ' ' + message ); } }; a.j(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.extendModule = function( ) { let a = this; a.c = false; a.d = 'ExtendModule'; a.e = null; a.f = null; a.g = null; a.h = function() { a.i(); }; a.i = function(){ textAnimation.extend = a.j; }; a.j = function( initial, overRide ) { if( !a.k( initial, overRide ) ){ return initial; } a.l( initial, overRide ); return a.g; }; a.k = function( initial, overRide ) { if( !initial || !overRide ){ a.m( 'invalid array extend.' ); return false; } if( typeof initial === 'object' && typeof overRide === 'object' ){ return true; } if( Array.isArray( initial ) && Array.isArray( overRide ) ){ return true; } a.m( 'invalid array extend.' ); return false; }; a.l = function( initial, overRide ) { if( Array.isArray( initial ) ){ a.g = [[], ...initial, ...overRide]; return; } if( typeof initial === 'object' ){ a.g = { ...initial, ...overRide }; return; } a.g = a.f; }; a.m = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.h(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.getUiIdModule = function( ) { var a = this; a.c = false; a.d = 'GetUiIdModule'; a.e = null; a.f = false; a.g = function() { var array = new Uint32Array(10); window.crypto.getRandomValues( array ); var id = Math.floor( Math.random() * 10 ); a.e = array[id] % 1024; a.h(); }; a.h = function(){ textAnimation.getUiId = a.i; }; a.i = function( name ) { if( a.f ){ return 'element_' + a.e++; } else { return name + '_' + a.e++; } }; a.k = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.g(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.setStyleModule = function( ) { let a = this; a.c = false; a.d = 'SetStyleModule'; a.e = function() { a.f(); }; a.f = function(){ textAnimation.setStyle = a.g; }; a.g = function( elementId, style, value ) { textAnimation.getElementById( elementId ).style[style] = value; }; a.h = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.e(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.getElementModule = function( ) { let a = this; a.c = false; a.d = 'GetElementModule'; a.e = null; a.f = true; a.g = function() { a.h(); }; a.h = function(){ textAnimation.getElementById = a.i; }; a.i = function( id ) { return document.getElementById( id ); }; a.j = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.g(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.eventManagerModule = function( ) { let a = this; a.c = false; a.d = 'EventManagerModule'; a.e = {}; a.f = function() { a.g(); }; a.g = function(){ textAnimation.subscribeToEvent = a.h; textAnimation.unSubscribeFromEvent = a.i; textAnimation.callEvent = a.j; }; a.h = function( eventId, callback ) { if( !a.e[eventId] ){ a.e[eventId] = new Array(); } let subscription = { 'callback' : callback }; a.e[eventId].push( subscription ); }; a.i = function( eventId, callback ) { if( !a.e[eventId] ){ return; } for( var i = a.e[eventId].length - 1; i >= 0 ; i-- ) { if( a.e[eventId][i]['callback'] === callback ) { a.e[eventId].splice( i, 1 ); } } }; a.j = function( eventId, options ) { if( !a.e[eventId] ){ return; } let callbacks = []; for( var i = 0; i < a.e[eventId].length; i++ ) { callbacks.push( a.e[eventId][i]['callback'] ); } for( var i = 0; i < callbacks.length; i++ ) { callbacks[i]( options ); } }; a.k = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.f(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.service = textAnimation.service ? textAnimation.service : {}; textAnimation.service.jsonLoaderModule = function( ) { let a = this; a.c = false; a.d = 'JsonLoaderModule'; a.e = null; a.f = function() { a.g(); }; a.g = function(){ textAnimation.loadJson = a.h; }; a.h = function( options ) { a.e = options; a.i( options['file'] ); }; a.i = function( file ) { let xObj = new XMLHttpRequest(); xObj.overrideMimeType( "application/json" ); xObj.open( 'GET', file, true ); xObj.onreadystatechange = () => { if ( xObj.readyState === 4 && xObj.status === 200 ) { a.hReady( xObj.responseText ); return; } }; xObj.send( null ); }; a.hReady = function( result ) { let callback = a.e['callback']; a.e = null; let json = a.k( result ); if( json ){ callback( json ); } }; a.k = function( result ) { let json = null; try { json = JSON.parse( result ); } catch (e) { a.l( e.message ); return null; } return json; }; a.l = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.f(); return { }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.animations = textAnimation.animations ? textAnimation.animations : {}; textAnimation.animations.loaderModule = function( ) { let a = this; a.c = 'AnimationsLoaderModule'; a.d = false; a.e = []; a.f = 0; a.g = null; a.h = function() { }; a.i = function( callback ) { a.g = callback; if( !a.j() ){ return; } a.iNext(); }; a.iNext = function() { let animationFiles = textAnimation.animationOptions['files']; let options = { 'file' : animationFiles[a.f], 'callback' : a.ied }; textAnimation.loadJson( options ); }; a.ied = function( animations ) { a.e = a.e.concat( animations ); a.f++; let animationFiles = textAnimation.animationOptions['files']; if( a.f >= animationFiles.length ){ a.iReady(); return; } a.iNext(); }; a.iReady = function() { a.p( 'loadReady' ); let callback = a.g; a.g = null; callback( a.e ); }; a.j = function() { if( !textAnimation.animationOptions || !textAnimation.animationOptions['files'] || !textAnimation.animationOptions['files'].length ){ a.p( 'textAnimation.animationOptions files not set' ); return false; } return true; }; a.q = function() { a.p( 'destruct' ); a.g = null; a.e = null; }; a.p = function( message ) { if( a.d ) { textAnimation.debug( a.c + ' ' + message ); } }; a.h(); return { load : function( callback ){ a.i( callback ); }, destruct : function( ){ a.q( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.animations = textAnimation.animations ? textAnimation.animations : {}; textAnimation.animations.service = textAnimation.animations.service ? textAnimation.animations.service : {}; textAnimation.animations.service.playerModule = function( ) { let a = this; a.c = false; a.d = 'AnimationsPlayerModule'; a.e = textAnimation.options.frameRate ? parseInt( textAnimation.options.frameRate ) : 40; a.f = 1000 / a.e; a.g = null; a.h = null; a.i = 0; a.j = false; a.k = false; a.l = null; a.m = {}; a.n = function() { a.o(); }; a.o = function(){ textAnimation.animations.addFrame = a.p; textAnimation.animations.removeFrame = a.q; textAnimation.animations.pause = a.r; textAnimation.animations.resume = a.s; textAnimation.animations.arePaused = a.t; }; a.u = function(){ delete textAnimation.animations.addFrame; delete textAnimation.animations.removeFrame; delete textAnimation.animations.pause; delete textAnimation.animations.resume; delete textAnimation.animations.arePaused; }; a.p = function( options ) { let frameId = a.i; a.i++; let frameOptions = a.w( options ); frameOptions['id'] = frameId; a.m['frame' + frameId] = frameOptions; if( !a.j && !a.x ){ a.j = true; a.y(); } return frameId; }; a.q = function( frameId ) { if( a.m['frame' + frameId] !== undefined ){ delete a.m['frame' + frameId]; } }; a.w = function( options ) { let frameOptions = { 'callback' : options['callback'] }; if( options['frameDelay'] ){ frameOptions['frameDelay'] = options['frameDelay']; } if( options['timeDelay'] ){ frameOptions['timeDelay'] = options['timeDelay']; frameOptions['startedAt'] = new Date(); } return frameOptions; }; a.qs = function() { Object.entries( a.m ).forEach( ( [key, frame] ) => { delete a.m[key]; }); }; a.y = function() { if( Object.keys( a.m ).length <= 0 ){ a.j = false; return; } a.l = Date.now(); a.g = window.requestAnimationFrame( a.aa ); }; a.aa = function() { if( a.g !== null ){ a.g = null; } let date = Date.now(); let expired = 0; expired = Math.abs( date - a.l ); let delay = Math.max( a.f - expired, 0 ); a.h = setTimeout( function () { a.ab(); }, delay ); }; a.ab = function() { a.ac(); a.ad(); let animationsToPlay = a.ae(); for( let i = 0; i < animationsToPlay.length; i++ ) { let frame = a.m[animationsToPlay[i]]; delete a.m[animationsToPlay[i]]; frame['callback']( ); } a.y(); }; a.ad = function( ) { Object.entries( a.m ).forEach( ( [key, frame] ) => { if( frame['frameDelay'] ){ frame['frameDelay']--; } }); }; a.ae = function( ) { let framesToPlay = []; Object.entries( a.m ).forEach( ( [key, frame] ) => { if( a.af( frame ) ){ framesToPlay.push( key ); } }); return framesToPlay; }; a.af = function( options ) { if( options['timeDelay'] === undefined && options['frameDelay'] === undefined ){ return true; } if( options['timeDelay'] !== undefined ){ let date = new Date(); let expired = Math.abs( date.getTime() - options['startedAt'].getTime() ); if( expired >= options['timeDelay'] ){ return true; } } if( options['frameDelay'] !== undefined ){ if( options['frameDelay'] <= 0 ){ return true; } } return false; }; a.r = function(){ a.ag( ); a.ac( ); a.k = true; }; a.t = function(){ return a.k; }; a.s = function(){ a.y(); a.k = false; }; a.ah = function() { a.ag( ); a.ac( ); a.j = false; a.l = null; }; a.ag = function( ) { if( a.g !== null ){ window.cancelAnimationFrame( a.g ); a.g = null; } }; a.ac = function( ) { if( a.h ){ clearTimeout( a.h ); a.h = null; } }; a.ai = function() { a.aj( 'destruct' ); a.u(); a.ah(); a.qs(); }; a.aj = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.n(); return { destruct : function( ){ a.ai( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.animations = textAnimation.animations ? textAnimation.animations : {}; textAnimation.animations.service = textAnimation.animations.service ? textAnimation.animations.service : {}; textAnimation.animations.service.effectsModule = function( ) { let a = this; a.c = false; a.d = 'AnimationsEffectsModule'; a.e = { 'outQuad' : {}, 'inQuad' : {}, 'inOutQuad' : {}, 'inSine' : {}, 'outSine' : {}, 'inOutSine' : {}, 'inElastic' : { 'seed' : 1.70158 }, 'outElastic' : { 'seed' : 1.70158 }, 'inOutElastic' : { 'seed' : 1.70158 }, 'inBack' : { 'seed' : 1.70158, }, 'outBack' : { 'seed' : 1.70158, }, 'inOutBack' : { 'seed' : 1.70158, 'factor' : 1.525 } }; a.f = function() { a.g(); a.h(); }; a.g = function(){ a.e['outQuad']['function'] = a.i; a.e['inQuad']['function'] = a.j; a.e['inOutQuad']['function'] = a.k; a.e['inSine']['function'] = a.l; a.e['outSine']['function'] = a.m; a.e['inOutSine']['function'] = a.n; a.e['inElastic']['function'] = a.o; a.e['outElastic']['function'] = a.p; a.e['inOutElastic']['function'] = a.q; a.e['inBack']['function'] = a.r; a.e['outBack']['function'] = a.s; a.e['inOutBack']['function'] = a.t; }; a.h = function(){ textAnimation.calculateEffect = a.u; }; a.u = function( steps, step, item ) { if( item['path'].length < 2 ){ return item['path'][0]; } let options = { 'steps' : steps, 'change' : item['path'][1] - item['path'][0] }; if( options['change'] === 0 ){ return item['path'][0]; } if( !item || !item['effect'] || !a.e[item['effect']] ){ return item['path'][0]; } options['moment'] = step / steps; return a.e[item['effect']]['function']( item, options ); }; a.j = function( item, options ) { let change = options['change']; let moment = options['moment']; let result = ( change * moment * moment ) + item['path'][0]; return result; }; a.i = function( item, options ) { let change = options['change']; let moment = options['moment']; let result = ( -change * moment * ( moment - 2 ) ) + item['path'][0]; return result; }; a.k = function( item, options ) { let change = options['change']; let moment = options['moment']; if( moment / 2 < 1 ){ let result = ( change / 2 * moment * moment ) + item['path'][0]; return result; } let result = ( -change / 2 * ( ( --moment ) * ( moment - 2) ) - 1 ) + item['path'][0]; return result; }; a.l = function( item, options ) { let change = options['change']; let moment = options['moment']; let result = -change * Math.cos( moment * ( Math.PI / 2 ) ) + change + item['path'][0]; return result; }; a.m = function( item, options ) { let change = options['change']; let moment = options['moment']; let result = change * Math.sin( moment * ( Math.PI / 2 ) ) + item['path'][0]; return result; }; a.n = function( item, options ) { let change = options['change']; let moment = options['moment']; let result = -change / 2 * ( Math.cos( Math.PI * moment ) - 1 ) + item['path'][0]; return result; }; a.o = function( item, options ) { let steps = options['steps']; let change = options['change']; let moment = options['moment']; if ( moment === 0 ){ return item['path'][0]; } if ( moment === 1 ){ return item['path'][0] + change; } let seed = a.e['inElastic']['seed']; let p = steps * 0.3; var a = change; if( a < Math.abs( change )) { a = change; seed = p / 4; } else { seed = p / ( 2 * Math.PI ) * Math.asin( change / a ); } let result = -( a * Math.pow( 2, 10 * ( moment -= 1 ) ) * Math.sin( ( moment * steps - seed ) * ( 2 * Math.PI ) / p ) ) + item['path'][0]; return result; }; a.p = function( item, options ) { let steps = options['steps']; let change = options['change']; let moment = options['moment']; if ( moment === 0 ){ return item['path'][0]; } if ( moment === 1 ){ return item['path'][0] + change; } let seed = a.e['inElastic']['seed']; let p = steps * 0.3; var a = change; if( a < Math.abs( change )) { a = change; seed = p / 4; } else { seed = p / ( 2 * Math.PI ) * Math.asin( change / a ); } let result = a * Math.pow( 2, -10 * moment ) * Math.sin( ( moment * steps - seed ) * ( 2 * Math.PI ) / p ) + change + item['path'][0]; return result; }; a.q = function( item, options ) { let steps = options['steps']; let change = options['change']; let moment = options['moment']; if ( moment === 0 ){ return item['path'][0]; } if( ( moment / steps / 2 ) === 2 ){ return item['path'][0] + change; } let seed = a.e['inOutElastic']['seed']; let p = steps * ( 0.3 * 1.5 ); var a = change; if( a < Math.abs( change )) { a = change; seed = p / 4; } else { seed = p / ( 2 * Math.PI ) * Math.asin( change / a ); } if ( moment < 1 ){ let result = -.5 * ( a * Math.pow( 2, 10 * ( moment -= 1 ) ) * Math.sin( ( moment * steps - seed ) * ( 2 * Math.PI ) / p ) ) + item['path'][0]; return result; } let result = a * Math.pow( 2, -10 * ( moment -= 1 ) ) * Math.sin( ( moment * steps - seed ) * ( 2 * Math.PI ) / p ) * 0.5 + change + item['path'][0]; return result; }; a.r = function( item, options ) { let change = options['change']; let moment = options['moment']; let seed = a.e['inBack']['seed']; let result = change * moment * moment * ( ( seed + 1 ) * moment - seed ) + item['path'][0]; return result; }; a.s = function( item, options ) { let change = options['change']; let moment = options['moment']; moment--; let seed = a.e['outBack']['seed']; let result = change * ( ( moment ) * moment * ( ( seed + 1 ) * moment + seed ) + 1 ) + item['path'][0]; return result; }; a.t = function( item, options ) { let change = options['change']; let moment = options['moment']; let seed = a.e['inOutBack']['seed']; let factor = a.e['inOutBack']['factor']; if( moment / 2 < 1 ){ let result = ( change / 2 * ( moment * moment * ( ( ( seed *= ( factor ) ) + 1 ) * moment - seed ) ) ) + item['path'][0]; return result; } let result = ( change / 2 * ( ( moment -= 2 ) * moment * ( ( ( seed *= ( factor ) ) + 1 ) * moment + seed ) + 2 ) ) + item['path'][0]; return result; }; a.v = function() { a.w( 'destruct' ); a.e = null; }; a.w = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.f(); return { destruct : function( ){ a.v( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.animations.text = textAnimation.animations.text ? textAnimation.animations.text : {}; textAnimation.animations.text.textModule = function( options, callbacks) { let a = this; a.c = false; a.d = 'AnimationsTextModule'; a.e = options; a.f = callbacks; a.g = {}; a.h = { 'frameId' : null, 'ready' : false }; a.i = {}; a.j = function() { a.k(); a.l(); }; a.k = function() { let valuesModule = textAnimation.animations.text.valuesModule; a.i['values'] = new valuesModule( a.e ); }; a.l = function() { let animateModule = textAnimation.animations.text.animate.animateModule; a.i['animate'] = new animateModule( a.e ); }; a.m = function() { let animationOptions = a.g; animationOptions['ready'] = false; let options = { 'frameDelay' : a.i['values'].getStartDelay( ), 'callback' : a.n }; animationOptions['frameId'] = textAnimation.animations.addFrame( options ); }; a.n = function() { let animationOptions = a.g; a.g['frameId'] = null; a.o(); if( !animationOptions['ready'] ){ let options = { 'frameDelay' : a.i['values'].getDelay( ), 'callback' : a.n }; animationOptions['frameId'] = textAnimation.animations.addFrame( options ); } }; a.o = function() { let animationOptions = a.g; a.i['values'].updateValues( ); a.p( ); a.nCaller(); if( !a.i['values'].isReady( ) ){ return; } animationOptions['ready'] = true; a.r(); }; a.nCaller = function() { let values = a.i['values'].getValues( ); a.i.animate.animate( values ); }; a.p = function() { if( a.i['values'].triggerReached( ) ){ a.f['trigger']( a.e ); } }; a.r = function( ) { a.f['ready']( a.e ); }; a.s = function() { Object.entries( a.i ).forEach( ( [key, module] ) => { module.destruct( ); }); a.i = {}; }; a.t = function( ) { a.u(); a.m(); }; a.v = function( ) { let animationOptions = a.g; if( animationOptions['ready'] ){ return false; } return true; }; a.u = function() { let animationOptions = a.g; if( animationOptions['frameId'] !== null ){ textAnimation.animations.removeFrame( animationOptions['frameId'] ); animationOptions['frameId'] = null; } }; a.w = function( ) { let values = a.i['values'].getValues( ); a.i.animate.animate( values ); }; a.x = function() { a.u(); a.s(); a.e = null; a.f = null; }; a.y = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.j(); return { start : function( ){ a.t( ); }, isPlaying : function( ){ return a.v( ); }, stop : function( ){ a.u( ); }, getValues : function( ){ return a.i.values.getValues( ); }, setValues : function( values ){ a.i.values.setValues( values ); }, layoutChange : function( ){ a.w( ); }, destruct : function( ){ a.x( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.animations.text.valuesModule = function( options ) { let a = this; a.c = false; a.d = 'AnimationsTextValuesModule'; a.e = options; a.f = { 'startDelay' : 0, 'delay' : 0, 'duration' : 40, 'items' : {}, }; a.g = [ 'units', 'center', 'heightRatio' ]; a.h = { 'step' : 0 }; a.i = function() { a.j(); a.k( ); a.l( ); }; a.j = function() { a.f = textAnimation.extend( a.f, a.e ); if( a.f['trigger'] ){ a.f['trigger']['triggered'] = false; } a.f = textAnimation.extend( a.f, a.h ); }; a.k = function( ) { let animationOptions = a.f; animationOptions['startDelay'] = parseInt( animationOptions['startDelay'] ); animationOptions['delay'] = parseInt( animationOptions['delay'] ); animationOptions['duration'] = parseInt( animationOptions['duration'] ); Object.entries( animationOptions['items'] ).forEach( ( [key, item] ) => { a.m( key, item ); }); if( animationOptions['trigger'] ){ animationOptions['trigger']['at'] = parseInt( options['trigger']['at'] ); } }; a.m = function( itemIndex, item ) { let animationOptions = a.f; if( item['path'] && typeof item['path'] === 'string' ){ let pathArray = item['path'].split( ',' ); Object.entries( pathArray ).forEach( ( [key, value] ) => { pathArray[key] = parseFloat( value ); }); animationOptions['items'][itemIndex]['path'] = pathArray; } }; a.l = function( ) { let animationOptions = a.f; animationOptions['steps'] = animationOptions['delay'] !== 0 ? animationOptions['duration'] / animationOptions['delay'] : animationOptions['duration']; }; a.n = function( ) { let animationOptions = a.f; Object.entries( animationOptions['items'] ).forEach( ( [key, item] ) => { a.o( item ); }); animationOptions['step']++; }; a.o = function( item ) { if( !item['path'] ){ return; } let path = item['path']; if( path.length === 1 ){ item['value'] = path[0]; return; } a.p( item ); }; a.p = function( item ) { let path = item['path']; let animationOptions = a.f; let steps = animationOptions['steps']; let step = animationOptions['step']; let pathSteps = path.length - 1; let stepsPerPathStep = steps / pathSteps; let stepDistance = step % stepsPerPathStep; let pathPosition = parseInt( step / stepsPerPathStep ); let from = path[pathPosition]; let to = path[pathPosition + 1]; if( typeof from === 'string' ){ item['value'] = step === steps - 1 ? to : from; return; } if( item['effect'] ){ a.q( steps, step, to, item ); return; } let distance = ( ( to - from ) / stepsPerPathStep ) * ( stepDistance + 1 ); item['value'] = step === steps - 1 ? to : from + distance; }; a.q = function( steps, step, to, item ) { let effect = textAnimation.calculateEffect( steps, step, item ); item['value'] = step === steps - 1 ? to : effect; }; a.r = function( ) { let animationOptions = a.f; let values = {}; Object.entries( animationOptions['items'] ).forEach( ( [key, item] ) => { values[key] = { 'value' : item['value'] }; a.s( values[key], item ); }); return values; }; a.s = function( value, item) { for( let i = 0; i < a.g.length; i++ ){ let key = a.g[i]; if( item[key] !== undefined ){ value[key] = item[key]; } } }; a.t = function( values ) { let animationOptions = a.f; Object.entries( values ).forEach( ( [key, item] ) => { animationOptions['items'][key] = animationOptions['items'][key] ? animationOptions['items'][key] : {}; animationOptions['items'][key]['value'] = item['value']; a.u( animationOptions['items'][key], item ); }); }; a.u = function( item, value ) { for( let i = 0; i < a.g.length; i++ ){ let key = a.g[i]; if( value[key] !== undefined ){ item[key] = value[key]; } } }; a.v = function( ) { let animationOptions = a.f; return animationOptions['startDelay']; }; a.w = function( ) { let animationOptions = a.f; return animationOptions['delay']; }; a.x = function( ) { let animationOptions = a.f; if( !animationOptions['trigger'] || animationOptions['trigger']['triggered'] ){ return false; } let itemId = animationOptions['trigger']['itemId']; let item = animationOptions['items'][itemId]; if( !item || !item['path'] ){ return false; } let at = animationOptions['trigger']['at']; let path = item['path']; let steps = animationOptions['steps']; let stepsPerPath = steps / path.length; let step = animationOptions['step']; if( step / stepsPerPath >= at ){ a.f['trigger']['triggered'] = true; return true; } return false; }; a.y = function( ) { let ready = true; let animationOptions = a.f; if( animationOptions['step'] < animationOptions['steps'] ){ ready = false; } return ready; }; a.z = function() { a.e = null; }; a.aa = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.i(); return { getValues : function( ){ return a.r( ); }, setValues : function( values ){ a.t( values ); }, getStartDelay : function( ){ return a.v( ); }, getDelay : function( ){ return a.w( ); }, updateValues : function( ){ a.n( ); }, triggerReached : function( ){ return a.x( ); }, isReady : function( ){ return a.y( ); }, destruct : function( ){ a.z( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.animations.text.animate = textAnimation.animations.text.animate ? textAnimation.animations.text.animate : {}; textAnimation.animations.text.animate.animateModule = function( options ) { let a = this; a.c = false; a.d = 'AnimationsTextAnimateModule'; a.e = options; a.f = {}; a.g = options['containerId']; a.h = function() { a.i(); }; a.i = function() { let transformModule = textAnimation.animations.text.animate.transformModule; a.f['transform'] = new transformModule( a.e ); let colorModule = textAnimation.animations.text.animate.colorModule; a.f['color'] = new colorModule( a.e ); }; a.j = function( values ) { a.jBorder( values ); a.l( values ); a.jFont( values ); a.jPadding( values ); let layout = {}; layout['parent'] = textAnimation.getElementById( a.e['parentId'] ).getBoundingClientRect(); layout['parent']['landscape'] = layout['parent']['width'] > layout['parent']['height'] ? true : false; a.f['transform'].animate( layout, values ); a.f['color'].animate( values ); a.o( values ); a.oImage( values ); }; a.oImage = function( values ) { if( !values['backgroundImage'] ){ return; } textAnimation.setStyle( a.g , 'background-image', values['backgroundImage']['value'] ); }; a.o = function( values ) { if( !values['background'] ){ return; } textAnimation.setStyle( a.g , 'background', values['background']['value'] ); }; a.l = function( values ) { if( !values['text'] ){ return; } textAnimation.getElementById( a.g ).innerHTML = values['text']['value']; }; a.jFont = function( values ) { a.q( values ); a.qStyle( values ); a.jFontWeight( values ); }; a.q = function( values ) { if( !values['font'] ){ return; } textAnimation.setStyle( a.g , 'font-family', values['font']['value'] ); }; a.qStyle = function( values ) { if( !values['fontStyle'] ){ return; } textAnimation.setStyle( a.g , 'font-style', values['fontStyle']['value'] ); }; a.jFontWeight = function( values ) { if( !values['fontWeight'] ){ return; } textAnimation.setStyle( a.g , 'font-weight', values['fontWeight']['value'] ); }; a.jPadding = function( values ) { if( !values['padding'] ){ return; } let units = a.t( 'padding', values, 'px' ); textAnimation.setStyle( a.g , 'padding', values['padding']['value'] + units ); }; a.jBorder = function( values ) { a.jBorderWidth( values ); a.jBorderRadius( values ); }; a.jBorderWidth = function( values ) { if( !values['borderWidth'] ){ return; } let units = a.t( 'borderWidth', values, 'px' ); textAnimation.setStyle( a.g , 'border-width', values['borderWidth']['value'] + units ); }; a.jBorderRadius = function( values ) { if( !values['borderRadius'] ){ return; } let units = a.t( 'borderRadius', values, 'px' ); textAnimation.setStyle( a.g , 'border-radius', values['borderRadius']['value'] + units ); }; a.t = function( itemId, values, defaultValue ) { let units = values[itemId]['units'] ? values[itemId]['units'] : defaultValue; return units; }; a.w = function( values ) { a.j( values ); }; a.x = function() { a.f['transform'].destruct(); a.f = {}; }; a.y = function() { a.x(); a.e = null; }; a.z = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.h(); return { animate : function( values ){ a.j( values ); }, layoutChange : function( values ){ a.w( values ); }, destruct : function( ){ a.y( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.animations.text.animate.transformModule = function( options ) { let a = this; a.c = false; a.d = 'AnimationsTextAnimateTransformModule'; a.e = options; a.f = options['containerId']; a.g = function() { }; a.h = function( layout, values ) { layout['container'] = { 'dimensions' : { 'scale' : {} }, 'positions' : {} }; a.i( layout, values ); a.j( layout ); a.k( layout, values ); a.l( layout ); a.m( layout, values ); layout['container'] = textAnimation.getElementById( a.f ).getBoundingClientRect(); }; a.i = function( layout, values ) { a.n( 'width', layout, values ); a.o( 'height', layout, values ); if( layout['parent']['landscape'] ){ a.n( 'landscapeWidth', layout, values ); a.o( 'landscapeHeight', layout, values ); } if( !layout['parent']['landscape'] ){ a.n( 'portretWidth', layout, values ); a.o( 'portretHeight', layout, values ); } }; a.n = function( itemId, layout, values ) { if( values[itemId] === undefined ){ return; } let dimensions = layout['container']['dimensions']; let item = values[itemId]; dimensions['width'] = ( layout['parent']['width'] / 100 ) * item['value']; if( item['heightRatio'] !== undefined ){ dimensions['height'] = dimensions['width'] * item['heightRatio']; } }; a.o = function( itemId, layout, values ) { if( values[itemId] === undefined ){ return; } let dimensions = layout['container']['dimensions']; let item = values[itemId]; dimensions['height'] = ( layout['parent']['height'] / 100 ) * item['value']; if( item['widthRatio'] !== undefined ){ dimensions['width'] = dimensions['height'] * item['widthRatio']; } }; a.k = function( layout, values ) { a.p( 'left', layout, values ); a.q( 'top', layout, values ); if( layout['parent']['landscape'] ){ a.p( 'landscapeLeft', layout, values ); a.q( 'landscapeTop', layout, values ); } if( !layout['parent']['landscape'] ){ a.p( 'portretLeft', layout, values ); a.q( 'portretTop', layout, values ); } }; a.p = function( itemId, layout, values ) { if( !values[itemId] ){ return ''; } let positions = layout['container']['positions']; let item = values[itemId]; positions['left'] = ( layout['parent']['width'] / 100 ) * item['value']; }; a.q = function( itemId, layout, values ) { if( !values[itemId] ){ return ''; } let positions = layout['container']['positions']; let item = values[itemId]; positions['top'] = ( layout['parent']['height'] / 100 ) * item['value']; }; a.j = function( layout ) { let dimensions = layout['container']['dimensions']; let scale = dimensions['scale']; dimensions['initialWidth'] = a.r(); dimensions['initialHeight'] = a.s(); scale['x'] = dimensions['width'] / dimensions['initialWidth']; scale['y'] = dimensions['height'] / dimensions['initialHeight']; }; a.r = function( ) { let initialWidth = textAnimation.getElementById( a.f ).offsetWidth; if( initialWidth === 0 ){ initialWidth = 10; textAnimation.setStyle( a.f , 'width', initialWidth + 'px' ); } return initialWidth; }; a.s = function( ) { let initialHeight = textAnimation.getElementById( a.f ).offsetHeight; if( initialHeight === 0 ){ initialHeight = 10; textAnimation.setStyle( a.f , 'height', initialHeight + 'px' ); } return initialHeight; }; a.l = function( layout ) { let dimensions = layout['container']['dimensions']; let left = ( dimensions['width'] - dimensions['initialWidth'] ) / 2; let top = ( dimensions['height'] - dimensions['initialHeight'] ) / 2; let positions = layout['container']['positions']; positions['left'] += left; positions['top'] += top; }; a.m = function( layout, values ) { let transform = ''; let positions = layout['container']['positions']; if( positions['left'] ){ transform += 'translateX(' + positions['left'] + 'px )'; } if( positions['top'] ){ transform += 'translateY(' + positions['top'] + 'px )'; } let scale = layout['container']['dimensions']['scale']; if( scale ){ transform += 'scaleX(' + scale['x'] + ')'; transform += 'scaleY(' + scale['y'] + ')'; } transform += a.t( values ); transform += a.u( values ); textAnimation.setStyle( a.f , 'transform', transform ); }; a.t = function( values ) { let transform = ''; transform += a.v( 'rotate', values ); transform += a.v( 'rotateX', values ); transform += a.v( 'rotateY', values ); transform += a.v( 'rotateZ', values ); return transform; }; a.v = function( itemId, values ) { if( !values[itemId] ){ return ''; } let transform = ''; let units = a.w( itemId, values, 'deg' ); transform += itemId + '( ' + parseInt( values[itemId]['value'] ) + units + ' ) '; return transform; }; a.u = function( values ) { let transform = ''; transform += a.x( 'skew', values ); transform += a.x( 'skewX', values ); transform += a.x( 'skewY', values ); return transform; }; a.x = function( itemId, values ) { if( !values[itemId] ){ return ''; } let transform = ''; let units = a.w( itemId, values, 'deg' ); transform += itemId + '( ' + parseInt( values[itemId]['value'] ) + units + ' ) '; return transform; }; a.w = function( itemId, values, defaultValue ) { let units = values[itemId]['units'] ? values[itemId]['units'] : defaultValue; return units; }; a.y = function() { a.e = null; }; a.z = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.g(); return { animate : function( layout, values ){ a.h( layout, values ); }, destruct : function( ){ a.y( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.animations.text.animate.colorModule = function( options ) { let a = this; a.c = false; a.d = 'AnimationsTextAnimateColorModule'; a.e = options; a.f = options['containerId']; a.g = function() { }; a.h = function( values ) { a.hOpacity( values ); a.hRgb( values ); a.hBackgroundRgb( values ); a.hBorderRgb( values ); a.hHsl( values ); a.hBackgroundHsl( values ); a.hBorderHsl( values ); a.hColor( values ); a.hBackgroundColor( values ); a.hBorderColor( values ); }; a.hOpacity = function( values ) { if( !values['opacity'] ){ return; } textAnimation.setStyle( a.f , 'opacity', values['opacity']['value'] ); }; a.hRgb = function( values ) { if( !values['colorR'] && !values['colorG'] && !values['colorB'] ){ return; } let rValue = values['colorR'] ? values['colorR']['value'] : 0; let gValue = values['colorG'] ? values['colorG']['value'] : 0; let bValue = values['colorB'] ? values['colorB']['value'] : 0; let color = 'rgb(' + parseInt( rValue ) + ',' + parseInt( gValue ) + ',' + parseInt( bValue ) + ')'; textAnimation.setStyle( a.f, 'color', color ); }; a.hBackgroundRgb = function( values ) { if( !values['backgroundColorR'] && !values['backgroundColorG'] && !values['backgroundColorB'] ){ return; } let rValue = values['backgroundColorR'] ? values['backgroundColorR']['value'] : 0; let gValue = values['backgroundColorG'] ? values['backgroundColorG']['value'] : 0; let bValue = values['backgroundColorB'] ? values['backgroundColorB']['value'] : 0; let color = 'rgb(' + parseInt( rValue ) + ',' + parseInt( gValue ) + ',' + parseInt( bValue ) + ')'; textAnimation.setStyle( a.f, 'background-color', color ); }; a.hBorderRgb = function( values ) { if( !values['borderColorR'] && !values['borderColorG'] && !values['borderColorB'] ){ return; } let rValue = values['borderColorR'] ? values['borderColorR']['value'] : 0; let gValue = values['borderColorG'] ? values['borderColorG']['value'] : 0; let bValue = values['borderColorB'] ? values['borderColorB']['value'] : 0; let color = 'rgb(' + parseInt( rValue ) + ',' + parseInt( gValue ) + ',' + parseInt( bValue ) + ')'; textAnimation.setStyle( a.f, 'border-color', color ); }; a.hHsl = function( values ) { if( !values['colorH'] && !values['colorS'] && !values['colorL'] ){ return; } let hValue = values['colorH'] ? values['colorH']['value'] : 0; let sValue = values['colorS'] ? values['colorS']['value'] : 0; let lValue = values['colorL'] ? values['colorL']['value'] : 0; let color = 'hsl(' + parseInt( hValue ) + ',' + parseInt( sValue ) + ',' + parseInt( lValue ) + ')'; textAnimation.setStyle( a.f, 'color', color ); }; a.hBackgroundHsl = function( values ) { if( !values['backgroundColorH'] && !values['backgroundColorS'] && !values['backgroundColorL'] ){ return; } let hValue = values['backgroundColorH'] ? values['backgroundColorH']['value'] : 0; let sValue = values['backgroundColorS'] ? values['backgroundColorS']['value'] : 0; let lValue = values['backgroundColorL'] ? values['backgroundColorL']['value'] : 0; let color = 'hsl(' + parseInt( hValue ) + ',' + parseInt( sValue ) + ',' + parseInt( lValue ) + ')'; textAnimation.setStyle( a.f, 'background-color', color ); }; a.hBorderHsl = function( values ) { if( !values['borderColorH'] && !values['borderColorS'] && !values['borderColorL'] ){ return; } let hValue = values['borderColorH'] ? values['borderColorH']['value'] : 0; let sValue = values['borderColorS'] ? values['borderColorS']['value'] : 0; let lValue = values['borderColorL'] ? values['borderColorL']['value'] : 0; let color = 'hsl(' + parseInt( hValue ) + ',' + parseInt( sValue ) + ',' + parseInt( lValue ) + ')'; textAnimation.setStyle( a.f, 'border-color', color ); }; a.hColor = function( values ) { if( !values['color'] ){ return; } let color = values['color']['value']; textAnimation.setStyle( a.f, 'color', color ); }; a.hBackgroundColor = function( values ) { if( !values['backgroundColor'] ){ return; } let color = values['backgroundColor']['value']; textAnimation.setStyle( a.f, 'background-color', color ); }; a.hBorderColor = function( values ) { if( !values['borderColor'] ){ return; } let color = values['borderColor']['value']; textAnimation.setStyle( a.f, 'border-color', color ); }; a.s = function() { a.e = null; }; a.t = function( message ) { if( a.c ) { textAnimation.debug( a.d + ' ' + message ); } }; a.g(); return { animate : function( values ){ a.h( values ); }, destruct : function( ){ a.s( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.content = textAnimation.content ? textAnimation.content : {}; textAnimation.content.contentModule = function( ) { var a = this; a.c = 'ContentModule'; a.d = true; a.e = { 'id' : textAnimation.getUiId( a.c + 'Container' ), 'element' : 'div', 'position' : 'absolute', 'backgroundColor' : 'transparent', 'overflow' : 'hidden', }; a.f = { 'id' : textAnimation.getUiId( a.c + 'Content' ), 'element' : 'div', 'position' : 'relative', 'backgroundColor' : 'transparent', 'top' : '0px', 'left' : '0px', 'width' : '100%', 'height' : '100%', }; a.g = { 'maximumWidth' : 1200, 'height' : 70, 'width' : 70, }; a.h = {}; a.i = function() { a.j(); a.k(); a.l(); }; a.j = function() { let containerId = textAnimation.options && textAnimation.options.containerId ? textAnimation.options.containerId : null; if( containerId ){ textAnimation.appendContainer( containerId, a.e ); textAnimation.appendContainer( a.e['id'], a.f ); return; } textAnimation.appendContainer( document.body, a.e ); textAnimation.appendContainer( a.e['id'], a.f ); }; a.k = function() { addEventListener( 'orientationchange', a.l ); addEventListener( 'resize', a.l ); }; a.m = function() { removeEventListener( 'orientationchange', a.l ); removeEventListener( 'resize', a.l ); }; a.n = function() { let animationModule = textAnimation.content.animation.animationModule; a.h.animation = new animationModule( a.f['id'] ); }; a.l = function() { let layout = { 'window' : {}, 'parent' : {}, 'container' : {} }; a.o( layout ); a.p( layout ); a.q( layout ); a.r( layout ); a.s( layout ); a.t( layout ); a.u( layout ); if( a.h.animation ){ a.h.animation.layoutChange( ); } }; a.o = function( layout ) { layout['window']['dimensions'] = { 'width' : window.innerWidth, 'height' : window.innerHeight }; }; a.p = function( layout ) { let parentId = textAnimation.options.containerId; layout['parent']['dimensions'] = { 'width' : textAnimation.getElementById( parentId ).offsetWidth, 'height' : textAnimation.getElementById( parentId ).offsetHeight }; }; a.q = function( layout ) { if( !textAnimation.options.useFullWindow ){ return; } let windowDimensions = layout['window']['dimensions']; let parentId = textAnimation.options.containerId; textAnimation.setStyle( parentId, 'width', windowDimensions['width'] + 'px' ); textAnimation.setStyle( parentId, 'height', windowDimensions['height'] + 'px' ); }; a.r = function( layout ) { let dimensions = textAnimation.options.useFullWindow ? layout['window']['dimensions'] : layout['parent']['dimensions']; let height = ( dimensions['height'] / 100 ) * a.g['height']; let width = ( dimensions['width'] / 100 ) * a.g['width']; width = Math.min( width, a.g['maximumWidth'] ); layout['container']['dimensions'] = { 'width' : width, 'height' : height }; }; a.u = function( layout ) { let dimensions = layout['container']['dimensions']; textAnimation.setStyle( a.e['id'], 'width', dimensions['width'] + 'px' ); textAnimation.setStyle( a.e['id'], 'height', dimensions['height'] + 'px' ); }; a.s = function( layout ) { let dimensions = textAnimation.options.useFullWindow ? layout['window']['dimensions'] : layout['parent']['dimensions']; let containerDimensions = layout['container']['dimensions']; let top = ( dimensions['height'] - containerDimensions['height'] ) / 2; let left = ( dimensions['width'] - containerDimensions['width'] ) / 2; let containerPositions = { 'top' : top, 'left' : left }; layout['container']['positions'] = containerPositions; }; a.t = function( layout ) { let positions = layout['container']['positions']; textAnimation.setStyle( a.e['id'], 'left', positions['left'] + 'px' ); textAnimation.setStyle( a.e['id'], 'top', positions['top'] + 'px' ); }; a.v = function( message ) { if( a.d ) { textAnimation.debug( a.c + ' ' + message ); } }; a.i(); return { startAnimation : function( ){ a.n( ); }, destruct : function( ){ a.w( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.content.animation = textAnimation.content.animation ? textAnimation.content.animation : {}; textAnimation.content.animation.animationModule = function( parentId ) { var a = this; a.c = 'ContentAnimationModule'; a.d = false; a.e = parentId; a.f = null; a.g = 0; a.h = { 'repeated' : 0, }; a.i = {}; a.j = function() { a.k(); a.l(); a.i['loader'].load( a.m ); }; a.k = function() { let loaderModule = textAnimation.animations.loaderModule; a.i['loader'] = new loaderModule( ); }; a.l = function() { var callbacks = { 'trigger' : a.n, 'ready' : a.o }; let elementsModule = textAnimation.content.animation.elementsModule; a.i['elements'] = new elementsModule( a.e, callbacks ); }; a.m = function( animations ) { a.f = animations; let animationOptions = a.f[a.g]; animationOptions['index'] = a.g; a.i['elements'].createElement( animationOptions ); let animation = a.i['elements'].createAnimation( animationOptions ); if( !animation ){ return; } animation.start( ); }; a.n = function( options ) { a.q( 'trigger' ); if( options['trigger']['show'] ){ a.i['elements'].show( options ); } if( options['trigger']['playNext'] && a.nCanPlayNext( options ) ){ options['triggered'] = true; a.s(); } }; a.o = function( options ) { a.q( 'ready' ); a.i['elements'].saveValues( options ); a.i['elements'].removeElement( options ); if( options['triggered'] && !a.i.elements.allAnimationsPlayed() ){ return; } if( options['playNext'] ){ a.s(); return; } if( a.i.elements.allAnimationsPlayed() ){ a.s(); } }; a.nCanPlayNext = function( options ) { if( options['index'] + 1 >= a.f.length ){ return false; } let animationOptions = a.f[options['index'] + 1]; if( a.i['elements'].animationIsPlaying( animationOptions ) ){ return false; } return true; }; a.s = function() { a.t(); if( a.u() ){ a.v(); return; } let animationOptions = a.f[a.g]; animationOptions['index'] = a.g; a.i['elements'].createElement( animationOptions ); let animation = a.i['elements'].createAnimation( animationOptions ); if( !animation ){ return; } a.i['elements'].setValues( animationOptions ); animation.start( ); }; a.t = function() { a.g++; }; a.v = function() { if( !textAnimation.animationOptions || !textAnimation.animationOptions['repeatOptions'] ){ return; } let repeatOptions = textAnimation.animationOptions['repeatOptions']; let repeat = repeatOptions['repeat'] ? repeatOptions['repeat'] : 0; let repeated = a.h['repeated']; if( repeat !== 'forever' || parseInt( repeat ) >= repeated ){ return; } a.h['repeated']++; let from = repeatOptions['from'] ? a.x( repeatOptions['from'] ): 0; a.g = from ? from : 0; let animationOptions = a.f[a.g]; animationOptions['index'] = a.g; a.i['elements'].createElement( animationOptions ); let animation = a.i['elements'].createAnimation( animationOptions ); animation.start( ); }; a.x = function( id ) { for( let i = 0; i < a.f.length; i++ ){ if( id === a.f[i]['id'] ){ return i; } } return null; }; a.u = function() { if( a.g < a.f.length ){ return false; } a.q( 'All animations played' ); return true; }; a.y = function() { a.i['elements'].layoutChange( ); }; a.z = function() { a.q( 'destruct' ); }; a.q = function( message ) { if( a.d ) { textAnimation.debug( a.c + ' ' + message ); } }; a.j(); return { layoutChange : function( ){ a.y( ); }, destruct : function( ){ a.z( ); } }; }; })( textAnimation );  ( function( textAnimation ){ textAnimation.content.animation.elementsModule = function( parentId, callbacks ) { var a = this; a.c = 'ContentAnimationElementsModule'; a.d = false; a.e = parentId; a.f = callbacks; a.g = { 'element' : 'div', 'display' : 'none', 'position' : 'absolute', 'backgroundColor' : 'transparent', }; a.h = {}; a.i = function() { }; a.j = function( options ) { if( !options['createElement'] ){ return; } if( !options['target'] ){ a.k( 'create element error target ! set.' ); return; } let target = options['target']; a.h[target] = a.h[target] ? a.h[target] : {}; let element = a.h[target]; if( textAnimation.getElementById( element['containerId'] ) ){ return; } element['containerId'] = a.l( target, options ); }; a.l = function( target, options ) { let containerOptions = textAnimation.extend( {}, a.g ); if( options['containerOptions'] ){ containerOptions = textAnimation.extend( containerOptions, options['containerOptions'] ); } containerOptions['id'] = textAnimation.getUiId( a.c + 'Container' + target ); textAnimation.appendContainer( a.e, containerOptions ); return containerOptions['id']; }; a.m = function( options ) { if( !options['removeElement'] ){ return; } if( !a.n( 'remove element', options ) ){ return; } let target = options['target']; let element = a.h[target]; a.o( element ); if( element['animation'] ){ element['animation'].destruct(); } delete a.h[target]; }; a.o = function( element ) { if( textAnimation.getElementById( element['containerId'] ) ){ textAnimation.getElementById( element['containerId'] ).remove(); } }; a.p = function( options ) { if( !a.n( 'create animation', options ) ){ return null; } let target = options['target']; a.q( target ); let element = a.h[target]; let animationModule = textAnimation.animations.text.textModule; var callbacks = { 'trigger' : a.f['trigger'], 'ready' : a.f['ready'] }; options['parentId'] = a.e; options['containerId'] = element['containerId']; options['triggered'] = false; let animation = new animationModule( options, callbacks ); element['animation'] = animation; return animation; }; a.r = function( options ) { let target = options['target']; if( !target || !a.h[target] ){ return false; } let animation = a.h[target]['animation']; if( !animation ){ return false; } return animation.isPlaying(); }; a.s = function( ) { let allAnimationsPlayed = true; Object.entries( a.h ).forEach( ( [key, element] ) => { if( element['animation'] && element['animation'].isPlaying() ){ allAnimationsPlayed = false; } }); return allAnimationsPlayed; }; a.q = function( target ) { let animation = a.h[target]['animation']; if( !animation ){ return; } animation.destruct(); delete a.h[target]['animation']; }; a.n = function( caller, options ) { if( a.h[options['target']] ){ return true; } a.k( caller + 'element ! found target: ' + options['target'] ); return false; }; a.t = function( options ) { if( !a.n( 'show', options ) ){ return; } let target = options['target']; let containerId = a.h[target]['containerId']; textAnimation.setStyle( containerId , 'display', 'table' ); }; a.u = function( options ) { let target = options['target']; let element = a.h[target]; let values = element['values'] ? element['values'] : {}; element['values'] = textAnimation.extend( values, element['animation'].getValues() ); }; a.v = function( options ) { if( !a.n( 'setValues', options ) ){ return; } let target = options['target']; let element = a.h[target]; if( !element['values'] ){ return; } element['animation'].setValues( element['values'] ); }; a.w = function() { Object.entries( a.h ).forEach( ( [key, element] ) => { a.x( key, element ); }); }; a.x = function( key, element ) { if( !element['animation'] ){ return; } element['animation'].layoutChange(); }; a.qs = function() { Object.entries( a.h ).forEach( ( [key, element] ) => { if( element['animation'] ){ element['animation'].destruct(); delete element['animation']; } }); }; a.ms = function() { Object.entries( a.h ).forEach( ( [key, element] ) => { if( textAnimation.getElementById( element['containerId'] ) ){ textAnimation.getElementById( element['containerId'] ).remove(); } }); a.h = null; }; a.aa = function() { a.k( 'destruct' ); a.qs(); a.ms(); }; a.k = function( message ) { if( a.d ) { textAnimation.debug( a.c + ' ' + message ); } }; a.i(); return { createElement : function( options ){ a.j( options ); }, removeElement : function( options ){ a.m( options ); }, createAnimation : function( options ){ return a.p( options ); }, animationIsPlaying : function( options ){ return a.r( options ); }, allAnimationsPlayed : function( ){ return a.s( ); }, saveValues : function( options ){ a.u( options ); }, setValues : function( options ){ a.v( options ); }, show : function( options ){ a.t( options ); }, layoutChange : function( ){ a.w( ); }, destruct : function( ){ a.aa( ); } }; }; })( textAnimation ); 